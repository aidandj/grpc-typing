"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import dummy_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DummyServiceStub:
    """DummyService"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    UnaryUnary: grpc.UnaryUnaryMultiCallable[
        dummy_pb2.DummyRequest,
        dummy_pb2.DummyReply,
    ]
    """UnaryUnary"""

    UnaryStream: grpc.UnaryStreamMultiCallable[
        dummy_pb2.DummyRequest,
        dummy_pb2.DummyReply,
    ]
    """UnaryStream"""

    StreamUnary: grpc.StreamUnaryMultiCallable[
        dummy_pb2.DummyRequest,
        dummy_pb2.DummyReply,
    ]
    """StreamUnary"""

    StreamStream: grpc.StreamStreamMultiCallable[
        dummy_pb2.DummyRequest,
        dummy_pb2.DummyReply,
    ]
    """StreamStream"""

class DummyServiceAsyncStub:
    """DummyService"""

    UnaryUnary: grpc.aio.UnaryUnaryMultiCallable[
        dummy_pb2.DummyRequest,
        dummy_pb2.DummyReply,
    ]
    """UnaryUnary"""

    UnaryStream: grpc.aio.UnaryStreamMultiCallable[
        dummy_pb2.DummyRequest,
        dummy_pb2.DummyReply,
    ]
    """UnaryStream"""

    StreamUnary: grpc.aio.StreamUnaryMultiCallable[
        dummy_pb2.DummyRequest,
        dummy_pb2.DummyReply,
    ]
    """StreamUnary"""

    StreamStream: grpc.aio.StreamStreamMultiCallable[
        dummy_pb2.DummyRequest,
        dummy_pb2.DummyReply,
    ]
    """StreamStream"""

class DummyServiceServicer(metaclass=abc.ABCMeta):
    """DummyService"""

    @abc.abstractmethod
    def UnaryUnary(
        self,
        request: dummy_pb2.DummyRequest,
        context: _ServicerContext,
    ) -> typing.Union[dummy_pb2.DummyReply, collections.abc.Awaitable[dummy_pb2.DummyReply]]:
        """UnaryUnary"""

    @abc.abstractmethod
    def UnaryStream(
        self,
        request: dummy_pb2.DummyRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[dummy_pb2.DummyReply], collections.abc.AsyncIterator[dummy_pb2.DummyReply]]:
        """UnaryStream"""

    @abc.abstractmethod
    def StreamUnary(
        self,
        request_iterator: _MaybeAsyncIterator[dummy_pb2.DummyRequest],
        context: _ServicerContext,
    ) -> typing.Union[dummy_pb2.DummyReply, collections.abc.Awaitable[dummy_pb2.DummyReply]]:
        """StreamUnary"""

    @abc.abstractmethod
    def StreamStream(
        self,
        request_iterator: _MaybeAsyncIterator[dummy_pb2.DummyRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[dummy_pb2.DummyReply], collections.abc.AsyncIterator[dummy_pb2.DummyReply]]:
        """StreamStream"""

def add_DummyServiceServicer_to_server(servicer: DummyServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
